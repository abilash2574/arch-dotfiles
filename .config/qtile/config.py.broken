# Copyright (c) 2010 Aldo Cortesi
# Copyright (c) 2010, 2014 dequis
# Copyright (c) 2012 Randall Ma
# Copyright (c) 2012-2014 Tycho Andersen
# Copyright (c) 2012 Craig Barnes
# Copyright (c) 2013 horsik
# Copyright (c) 2013 Tao Sauvage
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.


#   Imports

import os
import re
import socket
import subprocess
from libqtile import qtile
from libqtile import bar, hook, layout, qtile, widget
from libqtile.config import Click, Drag, Group, KeyChord, Key, Match, Screen
from libqtile.lazy import lazy
from libqtile.utils import guess_terminal
from typing import List

mod = "mod4"
myTerm = guess_terminal()
#myBrowser = "firefox"
#myFileManager = "pcmanfm"
#myMarkdown = "marktext"
#myMusicPlayer = myTerm+" -e cmus"
#myOfficeSuite = "desktopeditors"
#myPDFReader = "zathura"
#myTextEditor = "subl"



#keys = [
	# Qtile Controls
	#Key("M-C-r", lazy.restart()),
	#Key("M-C-q", lazy.shutdown()),

	# Window and Layout Controls
	#Key("M-k", lazy.layout.down()),
	#Key("M-j", lazy.layout.up()),
	#Key("M-S-k", lazy.layout.shuffle_down()),
	#Key("M-S-j", lazy.layout.shuffle_up()),
	#Key("M-<space>", lazy.layout.next()),
	#Key("M-S-f", lazy.layout.flip()),
	#Key("M-S-l", lazy.layout.grow()),
	#Key("M-l", lazy.layout.grow_main()),
	#Key("M-S-h", lazy.layout.shrink()),
	#Key("M-h", lazy.layout.shrink_main()),
	#Key("M-n", lazy.layout.normalize()),
	#Key("M-<Tab>", lazy.next_layout()),
	#Key("M-q", lazy.window.kill()),
	#Key("M-f", lazy.window.toggle_floating()),
	#Key("M-s", lazy.window.toggle_fullscreen()),
	#Key("M-<period>", lazy.next_screen()),
	#Key("M-<comma>", lazy.prev_screen()),

	# System Controls
	#Key("<XF86AudioLowerVolume>", lazy.spawn("amixer -M set Master 5%- unmute")),
	#Key("<XF86AudioRaiseVolume>", lazy.spawn("amixer -M set Master 5%+ unmute")),
	#Key("<XF86AudioMute>", lazy.spawn("amixer -M set Master toggle")),
	#Key("<XF86MonBrightnessDown>", lazy.spawn("brightnessctl set 10%-")),
	#Key("<XF86MonBrightnessUp>", lazy.spawn("brightnessctl set 10%+")),
	# Key("A-j", lazy.spawn("brightnessctl set 10%-")),
	# Key("A-k", lazy.spawn("brightnessctl set 10%+")),

	# Applications launcher
	#Key("M-r", lazy.spawn("rofi -show drun")),
	#Key("M-A-r", lazy.spawn("rofi -show run")),
	#Key("A-<Tab>", lazy.spawn("rofi -show window")),
	# Key("M-A-i", lazy.spawn(myBrowser)),
	# Key("M-e", lazy.spawn(myFileManager)),
	# Key("M-A-d", lazy.spawn(myMarkdown)),
	# Key("M-A-m", lazy.spawn(myMusicPlayer)),
	# Key("M-A-o", lazy.spawn(myOfficeSuite)),
	# Key("M-A-p", lazy.spawn(myPDFReader)),
	#Key("M-<Return>", lazy.spawn(myTerm)),
	# Key("M-A-t", lazy.spawn(myTextEditor)),
	# Key("M-A-e", lazy.spawn(myTerm + ' -e vifm')),
	# Key("M-A-s", lazy.spawn("spotify")),
	# Key("M-A-g", lazy.spawn("steam")),
	# Key("M-A-v", lazy.spawn("vlc")),
#]


keys = [
         ### The essentials
         Key([mod], "Return",
             lazy.spawn(myTerm),
             desc='Launches My Terminal'
             ),
		 #Key([mod, "shift"], "Return",
         #   lazy.spawn("dmenu_run -p 'Run: '"),
         #    # lazy.spawn("rofi -show drun -config ~/.config/rofi/themes/dt-dmenu.rasi -display-drun \"Run: \" -drun-display-format \"{name}\""),
         #    desc='Run Launcher'
         #    ),
         Key([mod], "Tab",
             lazy.next_layout(),
             desc='Toggle through layouts'
             ),
         Key([mod], "q",
             lazy.window.kill(),
             desc='Kill active window'
             ),
         Key([mod, "shift"], "r",
             lazy.restart(),
             desc='Restart Qtile'
             ),
         Key([mod, "shift"], "q",
             lazy.shutdown(),
             desc='Shutdown Qtile'
             ),
         #Key(["control", "shift"], "e",
         #    lazy.spawn("emacsclient -c -a emacs"),
         #    desc='Doom Emacs'
         #    ),
         
         ### Switch focus to specific monitor (out of three)
         #Key([mod], "w",
         #    lazy.to_screen(0),
         #    desc='Keyboard focus to monitor 1'
         #    ),
         #Key([mod], "e",
         #   lazy.to_screen(1),
         #    desc='Keyboard focus to monitor 2'
         #    ),
         #Key([mod], "r",
         #    lazy.to_screen(2),
         #    desc='Keyboard focus to monitor 3'
         #
             ),
         ### Switch focus of monitors
         #Key([mod], "period",
         #    lazy.next_screen(),
         #    desc='Move focus to next monitor'
         #    ),
         #Key([mod], "comma",
         #    lazy.prev_screen(),
         #    desc='Move focus to prev monitor'
         #
         
             ),
         ### Treetab controls
          Key([mod, "shift"], "h",
             lazy.layout.move_left(),
             desc='Move up a section in treetab'
             ),
         Key([mod, "shift"], "l",
             lazy.layout.move_right(),
             desc='Move down a section in treetab'
             ),
         
         ### Window controls
         Key([mod], "j",
             lazy.layout.down(),
             desc='Move focus down in current stack pane'
             ),
         Key([mod], "k",
             lazy.layout.up(),
             desc='Move focus up in current stack pane'
             ),
         Key([mod, "shift"], "j",
             lazy.layout.shuffle_down(),
             lazy.layout.section_down(),
             desc='Move windows down in current stack'
             ),
         Key([mod, "shift"], "k",
             lazy.layout.shuffle_up(),
             lazy.layout.section_up(),
             desc='Move windows up in current stack'
             ),
         Key([mod], "h",
             lazy.layout.shrink(),
             lazy.layout.decrease_nmaster(),
             desc='Shrink window (MonadTall), decrease number in master pane (Tile)'
             ),
         Key([mod], "l",
             lazy.layout.grow(),
             lazy.layout.increase_nmaster(),
             desc='Expand window (MonadTall), increase number in master pane (Tile)'
             ),
         Key([mod], "n",
             lazy.layout.normalize(),
             desc='normalize window size ratios'
             ),
         Key([mod], "m",
             lazy.layout.maximize(),
             desc='toggle window between minimum and maximum sizes'
             ),
         Key([mod, "shift"], "f",
             lazy.window.toggle_floating(),
             desc='toggle floating'
             ),
		 Key([mod], "f",
             lazy.window.toggle_fullscreen(),
             desc='toggle fullscreen'
             ),
         
         
         ### Stack controls
         Key([mod, "shift"], "Tab",
             lazy.layout.rotate(),
             lazy.layout.flip(),
             desc='Switch which side main pane occupies (XmonadTall)'
             ),
          Key([mod], "space",
             lazy.layout.next(),
             desc='Switch window focus to other pane(s) of stack'
             ),
         Key([mod, "shift"], "space",
             lazy.layout.toggle_split(),
             desc='Toggle between split and unsplit sides of stack'
             ),
         
         # Emacs programs launched using the key chord CTRL+e followed by 'key'
         #KeyChord(["control"],"e", [
         #    Key([], "e",
         #        lazy.spawn("emacsclient -c -a 'emacs'"),
         #        desc='Launch Emacs'
         #        ),
         #    Key([], "b",
         #        lazy.spawn("emacsclient -c -a 'emacs' --eval '(ibuffer)'"),
         #        desc='Launch ibuffer inside Emacs'
         #        ),
         #    Key([], "d",
         #        lazy.spawn("emacsclient -c -a 'emacs' --eval '(dired nil)'"),
         #        desc='Launch dired inside Emacs'
         #        ),
         #    Key([], "i",
         #        lazy.spawn("emacsclient -c -a 'emacs' --eval '(erc)'"),
         #        desc='Launch erc inside Emacs'
         #        ),
         #    Key([], "m",
         #        lazy.spawn("emacsclient -c -a 'emacs' --eval '(mu4e)'"),
         #        desc='Launch mu4e inside Emacs'
         #        ),
         #    Key([], "n",
         #        lazy.spawn("emacsclient -c -a 'emacs' --eval '(elfeed)'"),
         #        desc='Launch elfeed inside Emacs'
         #        ),
         #    Key([], "s",
         #        lazy.spawn("emacsclient -c -a 'emacs' --eval '(eshell)'"),
         #        desc='Launch the eshell inside Emacs'
         #        ),
         #    Key([], "v",
         #        lazy.spawn("emacsclient -c -a 'emacs' --eval '(+vterm/here nil)'"),
         #        desc='Launch vterm inside Emacs'
         #        )
         #]),
         # Dmenu scripts launched using the key chord SUPER+p followed by 'key'
         #KeyChord([mod], "p", [
         #    Key([], "e",
         #        lazy.spawn("./dmscripts/dm-confedit"),
         #        desc='Choose a config file to edit'
         #        ),
         #    Key([], "i",
         #        lazy.spawn("./dmscripts/dm-maim"),
         #        desc='Take screenshots via dmenu'
         #        ),
         #    Key([], "k",
         #        lazy.spawn("./dmscripts/dm-kill"),
         #        desc='Kill processes via dmenu'
         #        ),
         #    Key([], "l",
         #       lazy.spawn("./dmscripts/dm-logout"),
         #        desc='A logout menu'
         #        ),
         #    Key([], "m",
         #        lazy.spawn("./dmscripts/dm-man"),
         #       desc='Search manpages in dmenu'
         #        ),
         #    Key([], "o",
         #        lazy.spawn("./dmscripts/dm-bookman"),
         #        desc='Search your qutebrowser bookmarks and quickmarks'
         #        ),
         #    Key([], "r",
         #        lazy.spawn("./dmscripts/dm-reddit"),
         #        desc='Search reddit via dmenu'
         #        ),
         #    Key([], "s",
         #        lazy.spawn("./dmscripts/dm-websearch"),
         #        desc='Search various search engines via dmenu'
         #        ),
         #    Key([], "p",
         #        lazy.spawn("passmenu"),
         #        desc='Retrieve passwords with dmenu'
         #        )
         #])
         
         Key("<XF86AudioLowerVolume>", lazy.spawn("amixer -M set Master 5%- unmute")),
		 Key("<XF86AudioRaiseVolume>", lazy.spawn("amixer -M set Master 5%+ unmute")),
	     Key("<XF86AudioMute>", lazy.spawn("amixer -M set Master toggle")),
	     Key("<XF86MonBrightnessDown>", lazy.spawn("brightnessctl set 10%-")),
	     Key("<XF86MonBrightnessUp>", lazy.spawn("brightnessctl set 10%+")),
	     
	     Key("M-r", lazy.spawn("rofi -show drun")),
		 Key("M-A-r", lazy.spawn("rofi -show run")),
		 Key("A-<Tab>", lazy.spawn("rofi -show window")),
]










# groups = [
# 	Group("web", layout="max", matches=[Match(wm_class=["Brave-browser", "Min"])]),
# 	Group("dev", layout="monadtall", matches=[Match(wm_class=["Emacs", "jetbrains-idea", "Sublime_text"])]),
#	Group("sys", layout="monadtall", matches=[Match(wm_class=["Lxappearance", "Nitrogen"])]),
#	Group("doc", layout="monadtall", matches=[Match(wm_class=["DesktopEditors", "marktext", "Zathura"])]),
#	Group("chat", layout="max", matches=[Match(wm_class=["TelegramDesktop"])]),
#	Group("game", layout="floating"),
#	Group("media", layout="max", matches=[Match(wm_class=["Geeqie", "vlc"])]),
#	Group("gfx", layout="floating")
# ]

# groups = [
	# Group("1", layout="max"),
 	# Group("2", layout="monadtall"),
	# Group("3", layout="monadtall"),
	# Group("4", layout="monadtall"),
	# Group("5", layout="monadtail"),
	# Group("6", layout="monadtail"),
	# Group("7", layout="max"),
	# Group("8", layout="floating"),
	# Group("9", layout="floating")
# ]


# for k, group in zip(["1", "2", "3", "4", "5", "6", "7", "8", "9"], groups):
	# keys.append(Key("M-"+(k), lazy.group[group.name].toscreen()))			# Send current window to another group
	# keys.append(Key("M-S-"+(k), lazy.window.togroup(group.name)))	# Send current window to another group
	
	
group_names = [("1", {'layout': 'monadtall'}),
               ("2", {'layout': 'monadtall'}),
               ("3", {'layout': 'monadtall'}),
               ("4", {'layout': 'monadtall'}),
               ("5", {'layout': 'monadtall'}),
               ("6", {'layout': 'monadtall'}),
               ("7", {'layout': 'monadtall'}),
               ("8", {'layout': 'monadtall'}),
               ("9", {'layout': 'floating'})]

groups = [Group(name, **kwargs) for name, kwargs in group_names]

for i, (name, kwargs) in enumerate(group_names, 1):
    keys.append(Key([mod], str(i), lazy.group[name].toscreen()))        # Switch to another group
    keys.append(Key([mod, "shift"], str(i), lazy.window.togroup(name))) # Send current window to another group



	

	

# layout_theme = {"border_focus": "#61AFEF",
				# "border_normal": "#848484",
				# "margin": 4,
				# "border_width": 2
# }



layout_theme = {"border_width": 2,
                "margin": 8,
                "border_focus": "e1acff",
                "border_normal": "1D2330"
                }





# layouts = [
	# #layout.Bsp(**layout_theme),
	# #layout.Columns(**layout_theme),
	# #layout.Matrix(**layout_theme),
	# #layout.MonadWide(**layout_theme),
	# #layout.RatioTile(**layout_theme),
	# #layout.Slice(**layout_theme),
	# #layout.Stack(num_stacks=2),
	# #layout.Stack(stacks=2, **layout_theme),
	# #layout.Tile(shift_windows=True, **layout_theme),
	# #layout.VerticalTile(**layout_theme),
	# #layout.Zoomy(**layout_theme),
	# layout.Floating(**layout_theme),
	# layout.Max(**layout_theme),
	# layout.MonadTall(**layout_theme)
# ]


layouts = [
    #layout.MonadWide(**layout_theme),
    #layout.Bsp(**layout_theme),
    #layout.Stack(stacks=2, **layout_theme),
    #layout.Columns(**layout_theme),
    #layout.RatioTile(**layout_theme),
    #layout.Tile(shift_windows=True, **layout_theme),
    #layout.VerticalTile(**layout_theme),
    #layout.Matrix(**layout_theme),
    #layout.Zoomy(**layout_theme),
    layout.MonadTall(**layout_theme),
    layout.Max(**layout_theme),
    layout.Stack(num_stacks=2),
    layout.RatioTile(**layout_theme),
    layout.TreeTab(
         font = "Ubuntu",
         fontsize = 10,
         sections = ["FIRST", "SECOND", "THIRD", "FOURTH"],
         section_fontsize = 10,
         border_width = 2,
         bg_color = "1c1f24",
         active_bg = "c678dd",
         active_fg = "000000",
         inactive_bg = "a9a1e1",
         inactive_fg = "1c1f24",
         padding_left = 0,
         padding_x = 0,
         padding_y = 5,
         section_top = 10,
         section_bottom = 20,
         level_shift = 8,
         vspace = 3,
         panel_width = 200
         ),
    layout.Floating(**layout_theme)
]





# colours = [["#141414", "#141414"], # Background
		   # ["#FFFFFF", "#FFFFFF"], # Foreground
		   # ["#ABB2BF", "#ABB2BF"], # Grey Colour
		   # ["#E35374", "#E35374"],
		   # ["#89CA78", "#89CA78"],
		   # ["#F0C674", "#F0C674"],
		   # ["#61AFEF", "#61AFEF"],
		   # ["#D55FDE", "#D55FDE"],
		   # ["#2BBAC5", "#2BBAC5"]]

# prompt = "{0}@{1}: ".format(os.environ["USER"], socket.gethostname())



colors = [["#282c34", "#282c34"], # panel background
          ["#3d3f4b", "#434758"], # background for current screen tab
          ["#ffffff", "#ffffff"], # font color for group names
          ["#ff5555", "#ff5555"], # border line color for current tab
          ["#74438f", "#74438f"], # border line color for 'other tabs' and color for 'odd widgets'
          ["#4f76c7", "#4f76c7"], # color for the 'even widgets'
          ["#e1acff", "#e1acff"], # window name
          ["#ecbbfb", "#ecbbfb"]] # backbround for inactive screens

prompt = "{0}@{1}: ".format(os.environ["USER"], socket.gethostname())






# widget_defaults = dict(
	# background = colours[0],
	# foreground = colours[1],
	# font = "SF Pro Text Regular",
	# fontsize = 12,
	# padding = 1
# )
# extension_defaults = widget_defaults.copy()


# widgets = [
	# widget.Sep(
		# foreground = colours[0],
		# linewidth = 4,
	# ),
	# widget.Image(
		# filename = "~/.config/qtile/py.png",
		# mouse_callbacks = {"Button1": lambda: qtile.cmd_spawn("rofi -show drun")},
		# scale = True,
	# ),
	# widget.Sep(
		# foreground = colours[2],
		# linewidth = 1,
		# padding = 10,
	# ),
	# widget.GroupBox(
		# active = colours[4],
		# inactive = colours[6],
		# other_current_screen_border = colours[5],
		# other_screen_border = colours[2],
		# this_current_screen_border = colours[7],
		# this_screen_border = colours[2],
		# urgent_border = colours[3],
		# urgent_text = colours[3],
		# disable_drag = True,
		# highlight_method = 'text',
		# invert_mouse_wheel = True,
		# margin = 2,
		# padding = 0,
		# rounded = True,
		# urgent_alert_method = 'text',
	# ),
	# widget.Sep(
		# foreground = colours[2],
		# linewidth = 1,
		# padding = 10,
	# ),
	# widget.CurrentLayout(
		# foreground = colours[7],
		# font = "SF Pro Text Semibold",
	# ),
	# widget.Systray(
		# icon_size = 14,
		# padding = 4,
	# ),
	# widget.Cmus(
		# noplay_color = colours[2],
		# play_color = colours[1],
	# ),
	# widget.Sep(
		# foreground = colours[2],
		# linewidth = 1,
		# padding = 10,
	# ),
	# widget.WindowName(
		# max_chars = 75,
	# ),
	# widget.TextBox(
		# foreground = colours[3],
		# font = "JetBrainsMono Nerd Font Regular",
		# fontsize = 14,
		# mouse_callbacks = {"Button1": lambda: qtile.cmd_spawn(myTerm + ' -e ytop')},
		# padding = 0,
		# text = ' '
	# ),
	# widget.CPU(
		# foreground = colours[3],
		# format = '{load_percent}%',
		# mouse_callbacks = {"Button1": lambda: qtile.cmd_spawn(myTerm + ' -e ytop')},
		# update_interval = 1.0,
	# ),
	# widget.Sep(
		# foreground = colours[2],
		# linewidth = 1,
		# padding = 10,
	# ),
	# widget.TextBox(
		# foreground = colours[4],
		# font = "JetBrainsMono Nerd Font Regular",
		# fontsize = 14,
		# mouse_callbacks = {"Button1": lambda: qtile.cmd_spawn(myTerm + ' -e ytop')},
		# padding = 0,
		# text = '﬙ ',
	# ),
	# widget.Memory(
		# foreground = colours[4],
		# format = '{MemUsed} MB',
		# mouse_callbacks = {"Button1": lambda: qtile.cmd_spawn(myTerm + ' -e ytop')},
	# ),
	# widget.Sep(
		# foreground = colours[2],
		# linewidth = 1,
		# padding = 10,
	# ),
	# #widget.TextBox(
	# #	foreground = colours[5],
	# #	font = "JetBrainsMono Nerd Font Regular",
	# #	fontsize = 12,
	# #	padding = 0,
	# #	text = ' ',
	# #),
	# #widget.Backlight(
	# #	foreground = colours[5],
	# #	foreground_alert = colours[3],
	# #	backlight_name = 'amdgpu_bl0', # ls /sys/class/backlight/
	# #	change_command = 'brightnessctl set {0}',
	# #	step = 5,
	# #),
	# widget.TextBox(
		# foreground = colours[5],
		# font = "JetBrainsMono Nerd Font Regular",
		# fontsize = 14,
		# padding = 0,
		# text = ' ',
	# ),
	# widget.CheckUpdates(
		# colour_have_updates = colours[5],
		# colour_no_updates = colours[5],
		# custom_command = 'checkupdates',
	# #	custom_command = 'dnf updateinfo -q --list',
		# display_format = '{updates} Updates',
	# #	execute = "pkexec /usr/bin/dnf up -y",
		# execute = "pkexec /usr/bin/pacman -Syu --noconfirm",
		# no_update_string = 'Up to date!',
		# update_interval = 900,
	# ),
	# widget.Sep(
		# foreground = colours[2],
		# linewidth = 1,
		# padding = 10,
	# ),
	# widget.TextBox(
		# foreground = colours[6],
		# font = "JetBrainsMono Nerd Font Regular",
		# fontsize = 14,
		# mouse_callbacks = ({
			# "Button1": lambda: qtile.cmd_spawn("amixer -M set Master toggle"),
			# "Button3": lambda: qtile.cmd_spawn("pavucontrol"),
			# "Button4": lambda: qtile.cmd_spawn("amixer -M set Master 5%+ unmute"),
			# "Button5": lambda: qtile.cmd_spawn("amixer -M set Master 5%- unmute"),
		# }),
		# padding = 0,
		# text = '墳 ',
	# ),
	# widget.Volume(
		# foreground = colours[6],
		# mouse_callbacks = {"Button3": lambda: qtile.cmd_spawn("pavucontrol")},
		# step = 5,
	# ),
	# widget.Sep(
		# foreground = colours[2],
		# linewidth = 1,
		# padding = 10,
	# ),
	# #widget.TextBox(
	# #	foreground = colours[7],
	# #	font = "JetBrainsMono Nerd Font Regular",
	# #	fontsize = 14,
	# #	padding = 0,
	# #	text = '爵 ',
	# #),
	# #widget.Net(
	# #	foreground = colours[7],
	# #	format = '{down}  ',
	# #	interface = 'enp1s0',
	# #),
	# widget.Battery(
		# foreground = colours[7],
		# low_foreground = colours[3],
		# charge_char = ' ',
		# discharge_char = ' ',
		# empty_char = ' ',
		# full_char = ' ',
		# unknown_char = ' ',
		# font = "JetBrainsMono Nerd Font Regular",
		# fontsize = 14,
		# format = '{char}',
		# low_percentage = 0.2,
		# padding = 0,
		# show_short_text = False,
	# ),
	# widget.Battery(
		# foreground = colours[7],
		# low_foreground = colours[3],
		# format = '{percent:2.0%}',
		# low_percentage = 0.2,
		# notify_below = 20,
	# ),
	# widget.Sep(
		# foreground = colours[2],
		# linewidth = 1,
		# padding = 10,
	# ),
	# widget.TextBox(
		# foreground = colours[8],
		# font = "JetBrainsMono Nerd Font Regular",
		# fontsize = 14,
		# padding = 0,
		# text = ' ',
	# ),
	# widget.Clock(
		# foreground = colours[8],
		# format = '%a %b %d  %I:%M %P    ',
	# ),
	# #widget.StockTicker(
	# #	apikey = 'AESKWL5CJVHHJKR5',
	# #	url = 'https://www.alphavantage.co/query?'
	# #),
# ]

##### DEFAULT WIDGET SETTINGS #####
widget_defaults = dict(
    font="Ubuntu Mono",
    fontsize = 12,
    padding = 2,
    background=colors[2]
)
extension_defaults = widget_defaults.copy()



def init_widgets_list():
    widgets_list = [
              widget.Sep(
                       linewidth = 0,
                       padding = 6,
                       foreground = colors[2],
                       background = colors[0]
                       ),
              widget.Image(
                       filename = "~/.config/qtile/icons/python-white.png",
                       scale = "False",
                       mouse_callbacks = {'Button1': lambda: qtile.cmd_spawn(myTerm)}
                       ),
             widget.Sep(
                       linewidth = 0,
                       padding = 6,
                       foreground = colors[2],
                       background = colors[0]
                       ),
              widget.GroupBox(
                       font = "Ubuntu Bold",
                       fontsize = 9,
                       margin_y = 3,
                       margin_x = 0,
                       padding_y = 5,
                       padding_x = 3,
                       borderwidth = 3,
                       active = colors[2],
                       inactive = colors[7],
                       rounded = False,
                       highlight_color = colors[1],
                       highlight_method = "line",
                       this_current_screen_border = colors[6],
                       this_screen_border = colors [4],
                       other_current_screen_border = colors[6],
                       other_screen_border = colors[4],
                       foreground = colors[2],
                       background = colors[0]
                       ),
              widget.Prompt(
                       prompt = prompt,
                       font = "Ubuntu Mono",
                       padding = 10,
                       foreground = colors[3],
                       background = colors[1]
                       ),
              widget.Sep(
                       linewidth = 0,
                       padding = 40,
                       foreground = colors[2],
                       background = colors[0]
                       ),
              widget.WindowName(
                       foreground = colors[6],
                       background = colors[0],
                       padding = 0
                       ),
              widget.Systray(
                       background = colors[0],
                       padding = 5
                       ),
              widget.Sep(
                       linewidth = 0,
                       padding = 6,
                       foreground = colors[0],
                       background = colors[0]
                       ),
              widget.TextBox(
                       text = '',
                       background = colors[0],
                       foreground = colors[4],
                       padding = 0,
                       fontsize = 37
                       ),
             widget.Net(
                       interface = "enp6s0",
                       format = '{down} ↓↑ {up}',
                       foreground = colors[2],
                       background = colors[4],
                       padding = 5
                       ),
              widget.TextBox(
                       text = '',
                       background = colors[4],
                       foreground = colors[5],
                       padding = 0,
                       fontsize = 37
                       ),
              widget.TextBox(
                       text = " 🌡 TEMP NOT SHOWN ",
                       padding = 2,
                       foreground = colors[2],
                       background = colors[5],
                       fontsize = 11
                       ),
              # widget.ThermalSensor(
              #          foreground = colors[2],
              #          background = colors[5],
              #          threshold = 90,
              #          padding = 5
              #          ),
              widget.TextBox(
                       text='',
                       background = colors[5],
                       foreground = colors[4],
                       padding = 0,
                       fontsize = 37
                       ),
              widget.TextBox(
                       text = " ⟳",
                       padding = 2,
                       foreground = colors[2],
                       background = colors[4],
                       fontsize = 14
                       ),
              widget.CheckUpdates(
                       update_interval = 1800,
                       distro = "Arch_checkupdates",
                       display_format = "{updates} Updates",
                       foreground = colors[2],
                       mouse_callbacks = {'Button1': lambda: qtile.cmd_spawn(myTerm + ' -e sudo pacman -Syu')},
                       background = colors[4]
                       ),
              widget.TextBox(
                       text = '',
                       background = colors[4],
                       foreground = colors[5],
                       padding = 0,
                       fontsize = 37
                       ),
              widget.TextBox(
                       text = " 🖬",
                       foreground = colors[2],
                       background = colors[5],
                       padding = 0,
                       fontsize = 14
                       ),
              widget.Memory(
                       foreground = colors[2],
                       background = colors[5],
                       mouse_callbacks = {'Button1': lambda: qtile.cmd_spawn(myTerm + ' -e htop')},
                       padding = 5
                       ),
              widget.TextBox(
                       text='',
                       background = colors[5],
                       foreground = colors[4],
                       padding = 0,
                       fontsize = 37
                       ),
              widget.TextBox(
                       text = " ₿",
                       padding = 0,
                       foreground = colors[2],
                       background = colors[4],
                       fontsize = 12
                       ),
              widget.BitcoinTicker(
                       foreground = colors[2],
                       background = colors[4],
                       padding = 5
                       ),
              widget.TextBox(
                       text = '',
                       background = colors[4],
                       foreground = colors[5],
                       padding = 0,
                       fontsize = 37
                       ),
              widget.TextBox(
                      text = " Vol:",
                       foreground = colors[2],
                       background = colors[5],
                       padding = 0
                       ),
              widget.Volume(
                       foreground = colors[2],
                       background = colors[5],
                       padding = 5
                       ),
              widget.TextBox(
                       text = '',
                       background = colors[5],
                       foreground = colors[4],
                       padding = 0,
                       fontsize = 37
                       ),
              widget.CurrentLayoutIcon(
                       custom_icon_paths = [os.path.expanduser("~/.config/qtile/icons")],
                       foreground = colors[0],
                       background = colors[4],
                       padding = 0,
                       scale = 0.7
                       ),
              widget.CurrentLayout(
                       foreground = colors[2],
                       background = colors[4],
                       padding = 5
                       ),
              widget.TextBox(
                       text = '',
                       background = colors[4],
                       foreground = colors[5],
                       padding = 0,
                       fontsize = 37
                       ),
              widget.Clock(
                       foreground = colors[2],
                       background = colors[5],
                       format = "%A, %B %d - %H:%M "
                       ),
              ]
    return widgets_list



def window_to_prev_group(qtile):
    if qtile.currentWindow is not None:
        i = qtile.groups.index(qtile.currentGroup)
        qtile.currentWindow.togroup(qtile.groups[i - 1].name)

def window_to_next_group(qtile):
    if qtile.currentWindow is not None:
        i = qtile.groups.index(qtile.currentGroup)
        qtile.currentWindow.togroup(qtile.groups[i + 1].name)


mouse = [
    Drag([mod], "Button1", lazy.window.set_position_floating(),
         start=lazy.window.get_position()),
    Drag([mod], "Button3", lazy.window.set_size_floating(),
         start=lazy.window.get_size()),
    Click([mod], "Button2", lazy.window.bring_to_front())
]

dgroups_key_binder = None
dgroups_app_rules = []  # type: List
main = None
follow_mouse_focus = True
bring_front_click = False
cursor_warp = False

floating_layout = layout.Floating(float_rules=[
    # Run the utility of `xprop` to see the wm class and name of an X client.
    # default_float_rules include: utility, notification, toolbar, splash, dialog,
    # file_progress, confirm, download and error.
    *layout.Floating.default_float_rules,
    Match(title='Confirmation'),      # tastyworks exit box
    Match(title='Qalculate!'),        # qalculate-gtk
    Match(wm_class='kdenlive'),       # kdenlive
    Match(wm_class='pinentry-gtk-2'), # GPG key password entry
])
auto_fullscreen = True
focus_on_window_activation = "smart"

@hook.subscribe.startup_once
def start_once():
    home = os.path.expanduser('~')
    subprocess.call([home + '/.config/qtile/autostart.sh'])



# status_bar = lambda widgets: bar.Bar(widgets, 18, opacity=1.0)

# screens = [Screen(top=status_bar(widgets))]

# connected_monitors = subprocess.run(
	# "xrandr | grep 'connected' | cut -d ' ' -f 2",
	# shell = True,
	# stdout = subprocess.PIPE
# ).stdout.decode("UTF-8").split("\n")[:-1].count("connected")

# if connected_monitors > 1:
	# for i in range(1, connected_monitors):
		# screens.append(Screen(top=status_bar(widgets)))

# mouse = [
	# Drag("M-1", lazy.window.set_position_floating(),
		# start = lazy.window.get_position()),
	# Drag("M-3", lazy.window.set_size_floating(),
		# start  = lazy.window.get_size()),
	# Click("M-2", lazy.window.bring_to_front())
# ]

# auto_fullscreen = True
# auto_minimize = True
# bring_front_click = False
# cursor_warp = False
# dgroups_app_rules = []  # type: List
# dgroups_key_binder = None
# floating_layout = layout.Floating(**layout_theme,
	# float_rules=[
		# *layout.Floating.default_float_rules,
		# Match(title='Authentication'),
		# Match(title='branchdialog'),
		# Match(title='pinentry'),
		# Match(wm_class='confirmreset'),
		# Match(wm_class='makebranch'),
		# Match(wm_class='maketag'),
		# Match(wm_class='ssh-askpass'),
# ])
# focus_on_window_activation = "smart"
# follow_mouse_focus = True
# reconfigure_screens = True

# @hook.subscribe.startup_once
# def autostart():
	# home = os.path.expanduser('~/.config/qtile/autostart.sh')
	# subprocess.call([home])


# XXX: Gasp! We're lying here. In fact, nobody really uses or cares about this
# string besides java UI toolkits; you can see several discussions on the
# mailing lists, GitHub issues, and other WM documentation that suggest setting
# this string if your java app doesn't work correctly. We may as well just lie
# and say that we're a working one by default.
#
# We choose LG3D to maximize irony: it is a 3D non-reparenting WM written in
# java that happens to be on java's whitelist.
wmname = "LG3D"
